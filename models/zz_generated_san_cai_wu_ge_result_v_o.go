// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SanCaiWuGeResultVO san cai wu ge result v o
//
// swagger:model SanCaiWuGeResultVO
type SanCaiWuGeResultVO struct {

	// di
	// Required: true
	Di *WugeAnswerVO `json:"di"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`

	// ren
	// Required: true
	Ren *WugeAnswerVO `json:"ren"`

	// score
	// Required: true
	Score *int32 `json:"score"`

	// stroke count
	// Required: true
	StrokeCount *StrokeCount `json:"strokeCount"`

	// tian
	// Required: true
	Tian *WugeAnswerVO `json:"tian"`

	// traditional first name
	// Required: true
	TraditionalFirstName *string `json:"traditionalFirstName"`

	// traditional last name
	// Required: true
	TraditionalLastName *string `json:"traditionalLastName"`

	// wai
	// Required: true
	Wai *WugeAnswerVO `json:"wai"`

	// zong
	// Required: true
	Zong *WugeAnswerVO `json:"zong"`
}

// Validate validates this san cai wu ge result v o
func (m *SanCaiWuGeResultVO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrokeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTian(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraditionalFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraditionalLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWai(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZong(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanCaiWuGeResultVO) validateDi(formats strfmt.Registry) error {

	if err := validate.Required("di", "body", m.Di); err != nil {
		return err
	}

	if m.Di != nil {
		if err := m.Di.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("di")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("di")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateRen(formats strfmt.Registry) error {

	if err := validate.Required("ren", "body", m.Ren); err != nil {
		return err
	}

	if m.Ren != nil {
		if err := m.Ren.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ren")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ren")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateScore(formats strfmt.Registry) error {

	if err := validate.Required("score", "body", m.Score); err != nil {
		return err
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateStrokeCount(formats strfmt.Registry) error {

	if err := validate.Required("strokeCount", "body", m.StrokeCount); err != nil {
		return err
	}

	if m.StrokeCount != nil {
		if err := m.StrokeCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strokeCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strokeCount")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateTian(formats strfmt.Registry) error {

	if err := validate.Required("tian", "body", m.Tian); err != nil {
		return err
	}

	if m.Tian != nil {
		if err := m.Tian.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tian")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tian")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateTraditionalFirstName(formats strfmt.Registry) error {

	if err := validate.Required("traditionalFirstName", "body", m.TraditionalFirstName); err != nil {
		return err
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateTraditionalLastName(formats strfmt.Registry) error {

	if err := validate.Required("traditionalLastName", "body", m.TraditionalLastName); err != nil {
		return err
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateWai(formats strfmt.Registry) error {

	if err := validate.Required("wai", "body", m.Wai); err != nil {
		return err
	}

	if m.Wai != nil {
		if err := m.Wai.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wai")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wai")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) validateZong(formats strfmt.Registry) error {

	if err := validate.Required("zong", "body", m.Zong); err != nil {
		return err
	}

	if m.Zong != nil {
		if err := m.Zong.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zong")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this san cai wu ge result v o based on the context it is used
func (m *SanCaiWuGeResultVO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStrokeCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTian(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWai(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZong(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateDi(ctx context.Context, formats strfmt.Registry) error {

	if m.Di != nil {

		if err := m.Di.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("di")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("di")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateRen(ctx context.Context, formats strfmt.Registry) error {

	if m.Ren != nil {

		if err := m.Ren.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ren")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ren")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateStrokeCount(ctx context.Context, formats strfmt.Registry) error {

	if m.StrokeCount != nil {

		if err := m.StrokeCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strokeCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strokeCount")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateTian(ctx context.Context, formats strfmt.Registry) error {

	if m.Tian != nil {

		if err := m.Tian.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tian")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tian")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateWai(ctx context.Context, formats strfmt.Registry) error {

	if m.Wai != nil {

		if err := m.Wai.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wai")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wai")
			}
			return err
		}
	}

	return nil
}

func (m *SanCaiWuGeResultVO) contextValidateZong(ctx context.Context, formats strfmt.Registry) error {

	if m.Zong != nil {

		if err := m.Zong.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zong")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zong")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SanCaiWuGeResultVO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SanCaiWuGeResultVO) UnmarshalBinary(b []byte) error {
	var res SanCaiWuGeResultVO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
